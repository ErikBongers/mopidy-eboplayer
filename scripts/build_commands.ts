import * as fs from "node:fs";

//ARGUMENTSS
let inputFile = "P:\\mopidy\\mopidy-eboplayer\\scripts\\commands.json";
let outputFileName = "P:\\mopidy\\mopidy-eboplayer\\scripts\\moduleTestFile.ts";
let outFile: fs.WriteStream;
let includeComments = true;

main();

interface Param {
    name: string,
    default?: string | null
}

interface FuncDef {
    module: string;
    name: string;
    key: string;
    description: string;
    params: Param[] 
}

function main() {
    process.argv.forEach(function (val, index, array) {
        // console.log(index + ': ' + val);
    });

    let obj = JSON.parse(fs.readFileSync(inputFile, 'utf8'));

    // console.log(obj);

    let modules = new Map<string, Set<FuncDef>>();

    for(let key in obj.result) {
        let funcDefJson = obj.result[key];
        let parts = key.split(".");
        parts.shift(); //first item is always core.
        let moduleName = "";
        if(parts.length == 2)
            moduleName = parts.shift();

        let moduleSet = modules.get(moduleName);
        if(!moduleSet) {
            moduleSet = new Set<FuncDef>;
            modules.set(moduleName, moduleSet);
        }

        let functionName = parts.shift();
        functionName = snakeToCamel(functionName);

        let funcDef = {
            module: moduleName,
            name: functionName,
            key,
            description: funcDefJson.description,
            params: funcDefJson.params
        };

        moduleSet.add(funcDef);
    }

    outFile = fs.createWriteStream(outputFileName);

    writeLine(`//GENERATED by build_commands.ts (although probably customized, so do a diff when regenerating).
import {core, models, Mopidy} from "../mopidy_eboplayer/static/js/mopidy";
import TlTrack = models.TlTrack;
import PlaybackState = core.PlaybackState;
import Playlist = models.Playlist;

class Commands {
    private mopidy: Mopidy;
    
    constructor(mopidy: Mopidy) {
        this.mopidy = mopidy;
    }
    
    send(method: string, params: Object) {
        return this.mopidy._send({method, params});
    }
    core = {
`, 0);

    modules.forEach((funcDefs, modName) => {
        writeModule(modName, funcDefs, 8);
    });

    writeLine("    }", 0);
    writeLine("}", 0);
    outFile.close();
}

function writeModule(modName: string, funcDefs: Set<FuncDef>, indent: number) {
    if (modName)
        writeLine(`${modName}: {`, indent);

    funcDefs.forEach(funcDef => {
        writeFunction(funcDef, indent+(modName? 4: 0));
    });

    if (modName)
        writeLine(`},`, indent);
}

function writeComments(funcDef: FuncDef, indent: number) {
    let dscrLines = funcDef.description.split("\n");
    dscrLines.forEach((line) => {
        writeLine(`//${line}`, indent);
    });
}

function writeFunction(funcDef: FuncDef, indent: number) {
    if(includeComments)
        writeComments(funcDef, indent);
    write(`${funcDef.name}(`, indent);
    
    writeParams(funcDef, indent);
    
    writeLine(`) {`,0);
    writeLine(`    let key = "${funcDef.key}";`, indent);
    writeLine("},", indent);
}

function snakeToCamel(name: string) {
    return name.replace(/(_[a-z])/g, (match) =>
        match.toUpperCase().replace("_", "")
    );
}

function write(text: string, indent?: number) {
    let indentString = indent ? ' '.repeat(indent) : '';
    outFile.write(`${indentString}${text}`);
}

function writeLine(line: string, indent: number) {
    write(`${line}\n`, indent);
}

function writeParams(funcDef: FuncDef, indent: number) {
    let paramList = funcDef.params
        .map((param) => {
            let paramString = "";
            if(param.default) {
                if(param.default == "null") {
                    paramString += "?"
                } else {
                    paramString += ` = ${param.default}`;
                }
            }
            let type = guessParamType(funcDef, param);
            if(type)
                type = `: ${type}`;
            return `${param.name}${type}${paramString}`;
        })
        .join(", ");
    write(paramList);
}

function guessParamType(funcDef: FuncDef, param: Param) {
    switch (param.name) {
        case "uri":
        case "uri_scheme":
        case "query":
        case "field":
        case "name":
            return "string";
        case "mute":
        case "exact":
        case "value":
            return "boolean"
        case "volume":
        case "tlid":
        case "start":
        case "end":
        case "to_position":
        case "time_position":
        case "at_position":
            return "number";
        case "uris":
            return "string[]";
        case "tl_track":
            return "TlTrack";
        case "new_state":
            return "PlaybackState";
        case "playlist":
            return "Playlist";
        case "tracks":
            return "undefined";
        default:
            return secondGuess(funcDef, param);
    }

    function secondGuess(funcDef: FuncDef, param: Param) {
        switch (funcDef.key) {
            case "core.tracklist.remove":
                return "string /*TODO: or list */";
            case "core.tracklist.filter":
                return "any /*TODO: a dict*/";
            default:
                return "TODO";
        }
    }

}