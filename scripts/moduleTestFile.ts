//GENERATED by build_commands.ts (although probably customized, so do a diff when regenerating).
import {core, models, Mopidy} from "../mopidy_eboplayer/static/js/mopidy";
import TlTrack = models.TlTrack;
import PlaybackState = core.PlaybackState;
import Playlist = models.Playlist;

class Commands {
    private mopidy: Mopidy;
    
    constructor(mopidy: Mopidy) {
        this.mopidy = mopidy;
        this.core.commands = this;
        this.core.history.commands = this;
        this.core.library.commands = this;
        this.core.mixer.commands = this;
        this.core.playback.commands = this;
        this.core.playlists.commands = this;
        this.core.tracklist.commands = this;

    }
    
    send(method: string, params: Object) {
        if(params)
            return this.mopidy.send({method, params});
        else
            return this.mopidy.send({method});
    }
    core = {
        commands: undefined as Commands,

        getUriSchemes() {
            this.commands.send("core.get_uri_schemes");
        },
        getVersion() {
            this.commands.send("core.get_version");
        },
        history: {
            commands: undefined as Commands,
            getHistory() {
                this.commands.send("core.history.get_history");
            },
            getLength() {
                this.commands.send("core.history.get_length");
            },
        },
        library: {
            commands: undefined as Commands,
            browse(uri: string) {
                this.commands.send("core.library.browse", {uri});
            },
            getDistinct(field: string, query: string) {
                this.commands.send("core.library.get_distinct", {field, query});
            },
            getImages(uris: string[]) {
                this.commands.send("core.library.get_images", {uris});
            },
            lookup(uris: string[]) {
                this.commands.send("core.library.lookup", {uris});
            },
            refresh(uri: string) {
                this.commands.send("core.library.refresh", {uri});
            },
            search(query: string, uris: string[], exact: boolean) {
                this.commands.send("core.library.search", {query, uris, exact});
            },
        },
        mixer: {
            commands: undefined as Commands,
            getMute() {
                this.commands.send("core.mixer.get_mute");
            },
            getVolume() {
                this.commands.send("core.mixer.get_volume");
            },
            setMute(mute: boolean) {
                this.commands.send("core.mixer.set_mute", {mute});
            },
            setVolume(volume: number) {
                this.commands.send("core.mixer.set_volume", {volume});
            },
        },
        playback: {
            commands: undefined as Commands,
            getCurrentTlTrack() {
                this.commands.send("core.playback.get_current_tl_track");
            },
            getCurrentTlid() {
                this.commands.send("core.playback.get_current_tlid");
            },
            getCurrentTrack() {
                this.commands.send("core.playback.get_current_track");
            },
            getState() {
                this.commands.send("core.playback.get_state");
            },
            getStreamTitle() {
                this.commands.send("core.playback.get_stream_title");
            },
            getTimePosition() {
                this.commands.send("core.playback.get_time_position");
            },
            next() {
                this.commands.send("core.playback.next");
            },
            pause() {
                this.commands.send("core.playback.pause");
            },
            play(tl_track: TlTrack, tlid: number) {
                this.commands.send("core.playback.play", {tl_track, tlid});
            },
            previous() {
                this.commands.send("core.playback.previous");
            },
            resume() {
                this.commands.send("core.playback.resume");
            },
            seek(time_position: number) {
                this.commands.send("core.playback.seek", {time_position});
            },
            setState(new_state: PlaybackState) {
                this.commands.send("core.playback.set_state", {new_state});
            },
            stop() {
                this.commands.send("core.playback.stop");
            },
        },
        playlists: {
            commands: undefined as Commands,
            asList() {
                this.commands.send("core.playlists.as_list");
            },
            create(name: string, uri_scheme: string) {
                this.commands.send("core.playlists.create", {name, uri_scheme});
            },
            delete(uri: string) {
                this.commands.send("core.playlists.delete", {uri});
            },
            getItems(uri: string) {
                this.commands.send("core.playlists.get_items", {uri});
            },
            getUriSchemes() {
                this.commands.send("core.playlists.get_uri_schemes");
            },
            lookup(uri: string) {
                this.commands.send("core.playlists.lookup", {uri});
            },
            refresh(uri_scheme: string) {
                this.commands.send("core.playlists.refresh", {uri_scheme});
            },
            save(playlist: Playlist) {
                this.commands.send("core.playlists.save", {playlist});
            },
        },
        tracklist: {
            commands: undefined as Commands,
            add(tracks: undefined, at_position: number, uris: string[]) {
                this.commands.send("core.tracklist.add", {tracks, at_position, uris});
            },
            clear() {
                this.commands.send("core.tracklist.clear");
            },
            eotTrack(tl_track: TlTrack) {
                this.commands.send("core.tracklist.eot_track", {tl_track});
            },
            filter(criteria: any /*TODO: a dict*/) {
                this.commands.send("core.tracklist.filter", {criteria});
            },
            getConsume() {
                this.commands.send("core.tracklist.get_consume");
            },
            getEotTlid() {
                this.commands.send("core.tracklist.get_eot_tlid");
            },
            getLength() {
                this.commands.send("core.tracklist.get_length");
            },
            getNextTlid() {
                this.commands.send("core.tracklist.get_next_tlid");
            },
            getPreviousTlid() {
                this.commands.send("core.tracklist.get_previous_tlid");
            },
            getRandom() {
                this.commands.send("core.tracklist.get_random");
            },
            getRepeat() {
                this.commands.send("core.tracklist.get_repeat");
            },
            getSingle() {
                this.commands.send("core.tracklist.get_single");
            },
            getTlTracks() {
                this.commands.send("core.tracklist.get_tl_tracks");
            },
            getTracks() {
                this.commands.send("core.tracklist.get_tracks");
            },
            getVersion() {
                this.commands.send("core.tracklist.get_version");
            },
            index(tl_track: TlTrack, tlid: number) {
                this.commands.send("core.tracklist.index", {tl_track, tlid});
            },
            move(start: number, end: number, to_position: number) {
                this.commands.send("core.tracklist.move", {start, end, to_position});
            },
            nextTrack(tl_track: TlTrack) {
                this.commands.send("core.tracklist.next_track", {tl_track});
            },
            previousTrack(tl_track: TlTrack) {
                this.commands.send("core.tracklist.previous_track", {tl_track});
            },
            remove(criteria: string /*TODO: or list */) {
                this.commands.send("core.tracklist.remove", {criteria});
            },
            setConsume(value: boolean) {
                this.commands.send("core.tracklist.set_consume", {value});
            },
            setRandom(value: boolean) {
                this.commands.send("core.tracklist.set_random", {value});
            },
            setRepeat(value: boolean) {
                this.commands.send("core.tracklist.set_repeat", {value});
            },
            setSingle(value: boolean) {
                this.commands.send("core.tracklist.set_single", {value});
            },
            shuffle(start: number, end: number) {
                this.commands.send("core.tracklist.shuffle", {start, end});
            },
            slice(start: number, end: number) {
                this.commands.send("core.tracklist.slice", {start, end});
            },
        },
    }
}
